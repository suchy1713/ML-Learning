# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qodkhqvxwwzuUJjjA62t5xiwDABbEbBO
"""

import shap

class ShapWrapper(object):
    def __init__(self, X_test, model, explainer_class=shap.TreeExplainer):
        self.explainer = explainer_class(model)
        self.X_test = X_test
        self.shap_values = self.explainer.shap_values(X_test)
        self.expected_value = self.explainer.expected_value
        if isinstance(self.expected_value, list):
            self.expected_value = self.expected_value[1]

    def bar_summary_plot(self):
        shap.summary_plot(self.shap_values, self.X_test, plot_type='bar')

    def summary_plot(self):
        shap.summary_plot(self.shap_values, self.X_test)

    def decision_plot(self, X):
        sh = self.explainer.shap_values(X)
        shap.decision_plot(self.expected_value, sh, X, feature_order='hclust', link='logit')

    def dependance_plot(self, col):
        shap.dependence_plot(col, self.shap_values, self.X_test)

    def force_plot(self, row):
        sh = self.explainer.shap_values(row)
        shap.force_plot(self.expected_value, sh, row, matplotlib=True)